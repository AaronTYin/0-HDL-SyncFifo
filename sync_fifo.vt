// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/26/2018 11:19:58"
                                                                                
// Verilog Test Bench template for design : sync_fifo
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module sync_fifo_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg rst;
reg wr_en;
reg rd_en;
reg [7:0] data_in;
// wires                                               
wire [7:0]  data_out;
wire full;
wire empty;
integer i;

// assign statements (if any)                          
sync_fifo i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.rst(rst),
	.data_in(data_in),
	.data_out(data_out),
	.full(full),
	.empty(empty),
	.wr_en(wr_en),
	.rd_en(rd_en)
);

always #10 clk=~clk;

initial
begin
	clk=0;
	rst=0;
	rd_en=0;
	wr_en=0;
	data_in=0;
	
	#40
	rst=1;
	#35
	wr_en=1;
	#20
	rd_en=1; 
	
	for(i=0;i<20;i=i+1)
	begin
		#20 data_in=data_in+1;
	end

	
	#200 $stop;
@eachvec;
end
endmodule

